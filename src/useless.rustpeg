use super::{UselessStatement, SimpleType, SimpleTypeDef};

#[pub]
statement -> UselessStatement
    = set_command / type_command

#[pub]
set_command -> UselessStatement
    = var __ eq __ v:variable
    { UselessStatement::SetVar(v) }

#[pub]
type_command -> UselessStatement
    = type __ eq __ t:types
    { UselessStatement::SetType(t) }



#[pub]
variable -> SimpleType
    = quoted_string / float / integer

#[pub]
raw_string -> String
    = ( [^\"] / escaped_quote )*
    {
        match_str.to_string()
    }

#[pub]
quoted_string -> SimpleType
    = __ double_quote
      s:raw_string
      double_quote __
    {
        SimpleType::from_string(&s)
    }

integer -> SimpleType
    = whitespace* "-"? [1-9][0-9]* whitespace*
    { SimpleType::from_int( match_str.trim().parse().unwrap() ) }

float -> SimpleType
    = whitespace* "-"? [0-9]* "." [0-9]+
    { SimpleType::from_float(match_str.trim().parse().unwrap())}


#[pub]
escaped_quote = '\\"'
single_quote = "'"
double_quote = '"'
dash = "-"
var = "var"
eq = "="
__ = (whitespace / eol)*
type = "type"i

// types
types -> SimpleTypeDef
    = int_t / float_t / string_t
int_t -> SimpleTypeDef
    = "int"  { SimpleTypeDef::Int }
float_t -> SimpleTypeDef
    = "int"  { SimpleTypeDef::Float }
string_t -> SimpleTypeDef
    = "int"  { SimpleTypeDef::String }

whitespace
  = [ \t\u{00A0}\u{FEFF}\u{1680}\u{180E}\u{2000}-\u{200A}\u{202F}\u{205F}\u{3000}] // \v\f removed

eol
  = "\n"
  / "\r\n"
  / "\r"
  / "\u{2028}"
  / "\u{2029}"
